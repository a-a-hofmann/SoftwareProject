'''
		def find_dst_mac(dpid):
			node = self.find_node(dpid)
			ports = node.ports
			for p in ports:
				if p.link() in nx.all_neighbors(self.G, dpid) and p.link() not in self.visited_nodes: 						
					print dpid,":",p.id,"->",p.link(), "sending msg!"
					msg = of.ofp_packet_out(data = event.ofp)
					if event.ofp.buffer_id is not None:
						msg.buffer_id = event.ofp.buffer_id
					msg.actions.append(of.ofp_action_output(port = p.id))
					core.openflow.sendToDPID(dpid, msg)
					return
		'''

'''
				elif p.link() in nx.all_neighbors(self.G, dpid) and p.link() in self.visited_nodes:
					print p.link(), "I was visited, but maybe one of the nodes I am connected was not visited"
					link_node = self.find_node(p.link())
					link_ports = link_node.ports
					for p in ports:
						if p.link() in nx.all_neighbors(self.G, dpid) and p.link() not in self.visited_nodes: 						
							print dpid,":",p.id,"->",p.link(), "sending msg!!"
							msg = of.ofp_packet_out(data = event.ofp)
							if event.ofp.buffer_id is not None:
								msg.buffer_id = event.ofp.buffer_id
							msg.actions.append(of.ofp_action_output(port = p.id))
							core.openflow.sendToDPID(dpid, msg)
							return
				
				else:
					print dpid,":",p.id,"->",p.link()
					print [n for n in nx.all_neighbors(self.G, dpid)]
					print "1st cond->", p.link() in nx.all_neighbors(self.G, dpid) and p.link() not in self.visited_nodes
					print "2nd cond->", p.link() in nx.all_neighbors(self.G, dpid) and p.link() in self.visited_nodes
					print "Neighbor->", p.link() in nx.all_neighbors(self.G, dpid)
					return

				'''
